{"name":"Tinyjs","body":"# Tiny.js\r\n## by [Angus Gibbs](http://angusgibbs.com)\r\n\r\n## What is Tiny.js?\r\nTiny.js is a tiny Javascript framework. It was an awesome, chainable syntax, and just the right amount of built in features to make it a great way to develop cross browser web applications easily.\r\n\r\n## Docs\r\n### Creating the tiny object\r\nCreating a tiny object is easy. Simply pass a selector, DOMObject, or array of DOMObjects to the <code>$</code> function:\r\n\r\n<div class=\"highlight\">\r\n$('#foo'); // Works\r\n$(document.getElementById('foo')); // Works\r\n$(document.getElementById('foo'), document.getElementById('bar')); // Works\r\n</div>\r\n\r\n### Using the tiny object\r\nOnce you have your tiny object, you might as well use it.\r\n\r\n### Methods\r\n\r\n<table>\r\n  <tr>\r\n\t<th>Method</th>\r\n\t<th>Parameters</th>\r\n\t<th>Description</th>\r\n  </tr>\r\n  <tr>\r\n\t<td><strong>hasClass**</td>\r\n\t<td><em>String</em> class</td>\r\n\t<td>Returns whether or not <strong>all</strong> the elements in the tiny object have the given class\r\n  </tr>\r\n  <tr>\r\n\t<td><strong>addClass</strong></td>\r\n\t<td><em>String</em> class</td>\r\n\t<td>Adds the given class to all the elements in the tiny object.</td>\r\n  </tr>\r\n  <tr>\r\n\t<td><strong>removeClass</strong></td>\r\n\t<td><em>String</em> class</td>\r\n\t<td>Removes the given class from all the elements in the tiny object.</td>\r\n  </tr>\r\n  <tr>\r\n\t<td><strong>css</strong></td>\r\n\t<td><em>String</em> property, <em>String</em> value<br><em>JSON Object</em> attributes</td>\r\n\t<td>Sets the CSS of the elements in the tiny object. A property/value pair can be passed, or a JSON object, like so:\r\n\t\t<div class=\"highlight\">\r\n\t\t\t$('#foo').css('color', 'red'); // Works\r\n\t\t\t$('#foo').css({\r\n\t\t\t'color': 'red',\r\n\t\t\t'background': 'black'\r\n\t\t\t}); // Works\r\n\t\t</div>\r\n\t</td>\r\n  </tr>\r\n  <tr>\r\n   <td><strong>hide</strong></td>\r\n   <td></td>\r\n   <td>Hides all the elements in the tiny object.</td>\r\n  </tr>\r\n  <tr>\r\n\t<td><strong>show</strong></td>\r\n\t<td></td>\r\n\t<td>Shows all the elements in the tiny object.</td>\r\n  </tr>\r\n  <tr>\r\n\t<td><strong>toggle</strong></td>\r\n\t<td></td>\r\n\t<td>Toggles the visibility of the elements in the tiny object.</td>\r\n  </tr>\r\n  <tr>\r\n\t<td><strong>attr</strong></td>\r\n\t<td><em>String</em> attribute, <em>String</em> value<br><em>JSON Object</em> attributes</td>\r\n\t<td>Much like the css method, the attribute method accepts either an attribute/value pair or a JSON object of key/value pairs:\r\n\t\t<div class=\"highlight\">\r\n\t\t\t$('#foo').attr('data-awesome', 'yes'); // Works\r\n\t\t\t$('#foo').attr({\r\n\t\t\t\t'data-awesome': 'yes',\r\n\t\t\t\t'data-easy': 'yes'\r\n\t\t\t}); // Works\r\n\t\t</div>\r\n\t</td>\r\n  </tr>\r\n  <tr>\r\n\t<td><strong>each</strong></td>\r\n\t<td><em>Function</em> fn</td>\r\n\t<td>Executes the function on each of the elements passed. The parameters passed are the key, and the object as a whole. For example:\r\n\t\t<div class=\"highlight\">\r\n\t\t\t$('div').each(function(key, obj) {\r\n\t\t\t\tconsole.log(this); // The current object\r\n\t\t\t\tconsole.log(key); // The current position in the tiny object (e.g. 0)\r\n\t\t\t\tconsole.log(obj); // The tiny object\r\n\t\t\t});\r\n\t\t</div>\r\n\t</td>\r\n  </tr>\r\n</table>\r\n\r\n### Extending\r\n\r\nExtensions for tiny.js can be made just the same as for [jQuery](http://jquery.com). Here's a base template:\r\n\r\n<div class=\"highlight\">\r\n$.fn.myCoolPlugin = function(opts) {\r\n\treturn this.each(function() {\r\n\t\t// Do something with each object here\r\n\t});\r\n};\r\n</div>","tagline":"A tiny JavaScript framework.","google":"UA-29686666-1","note":"Don't delete this file! It's used internally to help with page regeneration."}